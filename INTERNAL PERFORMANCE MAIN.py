# Databricks notebook source
import pandas as pd
import os
import glob
from pyspark.sql.functions import col,trim

# COMMAND ----------

# MAGIC %run "../../Common/read_from_synapse"

# COMMAND ----------

# MAGIC %run "./Saparticlessales_incrementalload"

# COMMAND ----------

STG_UK_MARGINS_CALCDF = synapse_sql("select * from [con_etl].[STG_UK_MARGINS_CALC]")
STG_UK_MARGINS_CALCDF.createOrReplaceTempView('STG_UK_MARGINS_CALC')



# COMMAND ----------

import datetime
def getlatestfile(path):
    LMT=datetime.datetime(1970, 1, 1, 0, 0, 0,0)
    for file_item in os.listdir(path):
        file_path = os.path.join(path, file_item)
        ti_m = datetime.datetime.fromtimestamp(os.path.getmtime(file_path))
        if ti_m>LMT:
            LMT=ti_m
            LastModifiedFile=file_path[5:]
    return(LastModifiedFile)

# COMMAND ----------

uk_cmt_hiermap=getlatestfile('/dbfs/mnt/self-serve/DSE/BCRPExcel/BootsUK_Tailored_SAP_Hierarchy_CRP_Projects_BCRPExcel/Historical/')
#Source='/mnt/self-serve/DSE/BCRPExcel/BootsUK_Tailored_SAP_Hierarchy_CRP_Projects_BCRPExcel/Historical/*'
SourceDF=spark.read.format('csv').option('header',True).option('delimiter',',').load(uk_cmt_hiermap)
SourceDF.createOrReplaceTempView('uk_cmt_hiermap')

# COMMAND ----------


#Dimproduct with SCDActiveFlag=1 source used in DIM_RPT_PRODUCT_BRAND_CATEGORY AND RPT_INTERNAL_PERFORMANCE_MAIN table 
DimProductDF = synapse_sql("select * from [con_dwh].[DimProduct] where SCDActiveFlag =1")
#DimProductDF.createOrReplaceTempView('DimProduct')


# COMMAND ----------

DimProductDF.write.option('header','true').mode('overwrite').save('/mnt/self-serve/Temp_Tables/IP/OnlyActive_DimProduct/')

# COMMAND ----------

DimProduct=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/OnlyActive_DimProduct/')
DimProduct.createOrReplaceTempView("DimProduct")

# COMMAND ----------

# MAGIC %run "./SupplierFundingNodups"

# COMMAND ----------

DimDateDF = prodsynapse_sql("select * from [con_dwh].[DimDate]")
DimDateDF.createOrReplaceTempView('DimDate')
Date_CTEDF = spark.sql("SELECT Date AS date_name,concat(CalendarYear,case when length(Calendarweek)=1 then concat('0',cast(Calendarweek as string)) else cast(Calendarweek as string) end) as Calendar_Week_Int,CAST((BUKFiscalYear-1) AS VARCHAR(5)) AS BUKFiscalYear,CAST(SalesPlanPeriodA AS VARCHAR(2)) AS SalesPlanPeriodA,CAST(SalesPlanPeriodB AS VARCHAR(2)) AS SalesPlanPeriodB FROM DimDate")
Date_CTEDF.createOrReplaceTempView('Date_CTE')

DateDimDF = spark.sql("SELECT date_name,Calendar_Week_Int,case when length(SalesPlanPeriodA)=1 then concat(substring(BUKFiscalYear,3,2),'P',0,SalesPlanPeriodA) else concat(substring(BUKFiscalYear,3,2),'P',SalesPlanPeriodA) end AS a_period, case when length(SalesPlanPeriodB) = 1 then concat(substring(BUKFiscalYear,3,2),'P',0,SalesPlanPeriodB) else concat(substring(BUKFiscalYear,3,2),'P',SalesPlanPeriodB) end AS b_period FROM Date_CTE")
DateDimDF.createOrReplaceTempView('DateDim')


# COMMAND ----------

max_periodDF = spark.sql("SELECT DISTINCT substring(max((case when length(period) = 5 then concat(substring(period,0,3),0,(substring(period,4,2))) else period end)),0,5) AS Period,substring(max((case when length(period) = 5 then concat(substring(period,0,3),0,(substring(period,4,2))) else period end)),6,1) AS SalesPlan FROM SupplierFundingNodups")
max_periodDF.createOrReplaceTempView('MaxPeriod')

# COMMAND ----------

# MAGIC %run "../../Common/Upsert_to_Synapse"

# COMMAND ----------

PRODUCT_BRAND_CATEGORYDF=spark.sql("SELECT  distinct NVL(CAST(A.PRODUCTSOURCEKEY AS STRING ),'UNKNOWN') AS PRODUCT_SOURCE_KEY_P_KEY ,NVL(CAST(A.PRODUCTNAME AS STRING ),'UNKNOWN')  AS PRODUCT_NAME,NVL(concat (CAST(A.PRODUCTSOURCEKEY AS STRING ),' ', CAST(A.PRODUCTNAME AS STRING ) ),'UNKNOWN') AS PRODUCT_SOURCE_KEY_AND_NAME,NVL(CAST(A.BRAND   AS STRING ),'UNKNOWN') AS BRAND,NVL(CAST(A.LADDERID AS STRING ),'UNKNOWN') AS LADDER_ID,NVL(CAST(A.SUBLADDERID AS STRING ),'UNKNOWN') AS SUB_LADDER_ID,NVL(CAST(A.CATEGORY AS STRING ),'UNKNOWN') AS CATEGORY,NVL(CAST(A.PRODUCTHIERARCHY1NAME AS STRING ),'UNKNOWN') AS PRODUCT_HIERARCHY_1_NAME,NVL(CAST(A.PRODUCTHIERARCHY2NAME AS STRING ),'UNKNOWN') AS PRODUCT_HIERARCHY_2_NAME,NVL(CAST(A.PRODUCTHIERARCHY3NAME AS STRING ),'UNKNOWN') AS PRODUCT_HIERARCHY_3_NAME,NVL(CAST(A.PRODUCTHIERARCHY4NAME AS STRING ),'UNKNOWN') AS PRODUCT_HIERARCHY_4_NAME,NVL(CAST(A.PRODUCTHIERARCHY5NAME AS STRING ),'UNKNOWN') AS PRODUCT_HIERARCHY_5_NAME,NVL(CAST(A.PRODUCTHIERARCHY6NAME AS STRING ),'UNKNOWN') AS PRODUCT_HIERARCHY_6_NAME,NVL(CAST(B.`CMT Category` AS STRING  ),'UNKNOWN') AS SS_CRP_CATEGORY,NVL(CAST(A.OWNBRANDFLAG   AS STRING ),'UNKNOWN') AS OWN_BRAND_FLAG,current_timestamp() as CREATE_DATETIME,cast(null as timestamp) as UPDATE_DATETIME  FROM DIMPRODUCT A inner JOIN uk_cmt_hiermap B ON A.PRODUCTHIERARCHY5Name =B.`L6 Cost Centre Description`")
PRODUCT_BRAND_CATEGORYDF.createOrReplaceTempView('DIM_RPT_PRODUCT_BRAND_CATEGORY')

# COMMAND ----------

truncate_and_load_synapse (PRODUCT_BRAND_CATEGORYDF,'CON_DWH.DIM_RPT_PRODUCT_BRAND_CATEGORY')

# COMMAND ----------

# MAGIC %run "./marginscalc UK"

# COMMAND ----------

# MAGIC %run "./marginscalc ROI"

# COMMAND ----------

# MAGIC %run "./marginscalc UK.COM"

# COMMAND ----------

# MAGIC %run "./marginscalc ROI.COM"

# COMMAND ----------

STG_UK_MARGINS_CALCDF = synapse_sql("select * from [con_etl].[STG_UK_MARGINS_CALC]").withColumn('REPORTING_COUNTRY_CODE_P_KEY', trim('REPORTING_COUNTRY_CODE_P_KEY'))
STG_UK_MARGINS_CALCDF.createOrReplaceTempView('STG_UK_MARGINS_CALC')

# COMMAND ----------

# DBTITLE 1,YearWeekDates
DimDateDF = synapse_sql("select * from [con_dwh].[DimDate]")
DimDateDF.createOrReplaceTempView('DimDate')
YearWeekDatesDF=spark.sql("SELECT distinct Concat(CalendarYear, Calendar_week) AS calendar_Week,dense_rank () over (order by Concat(CalendarYear, Calendar_week) desc) AS week_rank FROM ( select CalendarYear,case when length(Calendarweek)=1 then concat('0',cast(Calendarweek as string)) else cast(Calendarweek as string) end as calendar_week  from  DimDate ) a where Concat(CalendarYear, Calendar_week) >= 201902 and Concat(CalendarYear, Calendar_week)<=(select max(CalendarYearWeek) from  SapArticlesSales) order by Calendar_Week desc" )
YearWeekDatesDF.createOrReplaceTempView('YearWeekDates')

# COMMAND ----------

# DBTITLE 1,RPT_IP_STORE_DF
RPT_INTERNAL_PERFORMANCE_STORE_DF=spark.sql("select nvl(TIME_PERIOD,'UNKNOWN') AS TIME_PERIOD,nvl(PRODUCT_SOURCE_KEY_P_KEY,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY, nvl(trim(REPORTING_COUNTRY_CODE_P_KEY),'-1') as REPORTING_COUNTRY_CODE_P_KEY,nvl(STORE_FORMAT_P_KEY,'UNKNOWN') AS STORE_FORMAT_P_KEY,nvl(STORE_TYPE_P_KEY,'UNKNOWN')  AS STORE_TYPE_P_KEY,nvl(SALES_LOCATION_TYPE_P_KEY,-1) as SALES_LOCATION_TYPE_S_KEY,nvl(UNITS_TY,0.0000) as TOTAL_UNITS_TY ,nvl(UNITS_LY,0.0000) as TOTAL_UNITS_LY,NVL(UNITS_CHANGE,0.0000) AS TOTAL_UNITS_CHANGE,NVL(TESP_TY,0.0000) AS TOTAL_TESP_TY,NVL(TESP_LY,0.0000) AS TOTAL_TESP_LY, NVL(TESP_CHANGE,0.0000) AS TOTAL_TESP_CHANGE,current_timestamp as CREATE_DATETIME, cast(null as timestamp) as UPDATE_DATETIME from (SELECT 'Previous 52 CRP Weeks'  AS TIME_PERIOD,S.ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY,S.REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,cast((CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END) as int) AS SALES_LOCATION_TYPE_P_KEY,S.StoreFormat as STORE_FORMAT_P_KEY,(case when S.StoreType='Other' THEN 'Online' else StoreType end) as STORE_TYPE_P_KEY,cast(SUM(S.Units_TY) as decimal(18,4)) as UNITS_TY,cast(SUM(S.Units_LY) as decimal(18,4)) AS UNITS_LY,cast((SUM(S.UNITS_TY)-SUM(S.UNITS_LY)) as decimal(18,4)) AS UNITS_CHANGE,cast(SUM(S.Tesp_TY) as decimal(18,4)) as TESP_TY,cast(SUM(S.Tesp_LY) as decimal(18,4)) as TESP_LY,cast((SUM(TESP_TY)-SUM(TESP_LY)) as decimal(18,4)) AS TESP_CHANGE FROM SapArticlesSales S INNER JOIN  (Select distinct calendar_week, week_rank from YearWeekDates) dt ON S.CalendarYearWeek = dt.calendar_week where dt.week_rank between 13 and 64 GROUP BY 'Previous 52 CRP Weeks', S.ProductSourceKey,S.REPORTING_COUNTRY_CODE,CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END,S.StoreFormat,case when S.StoreType='Other' THEN 'Online' else StoreType end) UNION select nvl(TIME_PERIOD,'UNKNOWN') AS TIME_PERIOD,nvl(PRODUCT_SOURCE_KEY_P_KEY,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY, nvl(trim(REPORTING_COUNTRY_CODE_P_KEY),'-1') as REPORTING_COUNTRY_CODE_P_KEY,nvl(STORE_FORMAT_P_KEY,'UNKNOWN') AS STORE_FORMAT_P_KEY,nvl(STORE_TYPE_P_KEY,'UNKNOWN')  AS STORE_TYPE_P_KEY,nvl(SALES_LOCATION_TYPE_P_KEY,-1) as SALES_LOCATION_TYPE_S_KEY,nvl(UNITS_TY,0.0000) as TOTAL_UNITS_TY ,nvl(UNITS_LY,0.0000) as TOTAL_UNITS_LY,NVL(UNITS_CHANGE,0.0000) AS TOTAL_UNITS_CHANGE,NVL(TESP_TY,0.0000) AS TOTAL_TESP_TY,NVL(TESP_LY,0.0000) AS TOTAL_TESP_LY, NVL(TESP_CHANGE,0.0000) AS TOTAL_TESP_CHANGE,current_timestamp as CREATE_DATETIME, cast(null as timestamp) as UPDATE_DATETIME from (SELECT 'Previous 52 Weeks'  AS TIME_PERIOD,S.ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY,S.REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,cast((CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END) as int) AS SALES_LOCATION_TYPE_P_KEY,S.StoreFormat as STORE_FORMAT_P_KEY,(case when S.StoreType='Other' THEN 'Online' else S.StoreType end) as STORE_TYPE_P_KEY,cast(SUM(S.Units_TY) as decimal(18,4)) as UNITS_TY,cast(SUM(S.Units_LY) as decimal(18,4)) AS UNITS_LY,cast((SUM(S.UNITS_TY)-SUM(S.UNITS_LY)) as decimal(18,4)) AS UNITS_CHANGE,cast(SUM(S.Tesp_TY) as decimal(18,4)) as TESP_TY,cast(SUM(S.Tesp_LY) as decimal(18,4)) as TESP_LY,cast((SUM(TESP_TY)-SUM(TESP_LY)) as decimal(18,4)) AS TESP_CHANGE FROM SapArticlesSales S INNER JOIN  (Select distinct calendar_week, week_rank from YearWeekDates) dt ON S.CalendarYearWeek = dt.calendar_week where dt.week_rank between 1 and 52 GROUP BY 'Previous 52 Weeks', S.ProductSourceKey,S.REPORTING_COUNTRY_CODE,CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END,S.StoreFormat,(case when S.StoreType='Other' THEN 'Online' else S.StoreType end)) UNION select nvl(TIME_PERIOD,'UNKNOWN') AS TIME_PERIOD,nvl(PRODUCT_SOURCE_KEY_P_KEY,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY, nvl(trim(REPORTING_COUNTRY_CODE_P_KEY),'-1') as REPORTING_COUNTRY_CODE_P_KEY,nvl(STORE_FORMAT_P_KEY,'UNKNOWN') AS STORE_FORMAT_P_KEY,nvl(STORE_TYPE_P_KEY,'UNKNOWN')  AS STORE_TYPE_P_KEY,nvl(SALES_LOCATION_TYPE_P_KEY,-1) as SALES_LOCATION_TYPE_S_KEY,nvl(UNITS_TY,0.000) as TOTAL_UNITS_TY ,nvl(UNITS_LY,0.000) as TOTAL_UNITS_LY,NVL(UNITS_CHANGE,0.000) AS TOTAL_UNITS_CHANGE,NVL(TESP_TY,0.000) AS TOTAL_TESP_TY,NVL(TESP_LY,0.000) AS TOTAL_TESP_LY, NVL(TESP_CHANGE,0.000) AS TOTAL_TESP_CHANGE,current_timestamp as CREATE_DATETIME, cast(null as timestamp) as UPDATE_DATETIME from (SELECT 'Previous 12 Weeks'  AS TIME_PERIOD,S.ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY,S.REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,cast((CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END) as int) AS SALES_LOCATION_TYPE_P_KEY,S.StoreFormat as STORE_FORMAT_P_KEY,(case when StoreType='Other' THEN 'Online' else StoreType end) as STORE_TYPE_P_KEY,cast(SUM(S.Units_TY) as decimal(18,4)) as UNITS_TY,cast(SUM(S.Units_LY) as decimal(18,4)) AS UNITS_LY,cast((SUM(S.UNITS_TY)-SUM(S.UNITS_LY)) as decimal(18,4)) AS UNITS_CHANGE,cast(SUM(S.Tesp_TY) as decimal(18,4)) as TESP_TY,cast(SUM(S.Tesp_LY) as decimal(18,4)) as TESP_LY,cast((SUM(TESP_TY)-SUM(TESP_LY)) as decimal(18,4)) AS TESP_CHANGE FROM SapArticlesSales S INNER JOIN  (Select distinct calendar_week, week_rank from YearWeekDates) dt ON S.CalendarYearWeek = dt.calendar_week where dt.week_rank between 1 and 12 GROUP BY 'Previous 12 Weeks', S.ProductSourceKey,S.REPORTING_COUNTRY_CODE,CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END,S.StoreFormat,(case when StoreType='Other' THEN 'Online' else StoreType end)) UNION select nvl(TIME_PERIOD,'UNKNOWN') AS TIME_PERIOD,nvl(PRODUCT_SOURCE_KEY_P_KEY,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY, nvl(trim(REPORTING_COUNTRY_CODE_P_KEY),'-1') as REPORTING_COUNTRY_CODE_P_KEY,nvl(STORE_FORMAT_P_KEY,'UNKNOWN') AS STORE_FORMAT_P_KEY,nvl(STORE_TYPE_P_KEY,'UNKNOWN')  AS STORE_TYPE_P_KEY,nvl(SALES_LOCATION_TYPE_P_KEY,-1) as SALES_LOCATION_TYPE_S_KEY,nvl(UNITS_TY,0.0000) as TOTAL_UNITS_TY ,nvl(UNITS_LY,0.0000) as TOTAL_UNITS_LY,NVL(UNITS_CHANGE,0.0000) AS TOTAL_UNITS_CHANGE,NVL(TESP_TY,0.0000) AS TOTAL_TESP_TY,NVL(TESP_LY,0.0000) AS TOTAL_TESP_LY, NVL(TESP_CHANGE,0.0000) AS TOTAL_TESP_CHANGE,current_timestamp as CREATE_DATETIME, cast(null as timestamp) as UPDATE_DATETIME from (SELECT 'Previous 4 Weeks'  AS TIME_PERIOD,S.ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY,S.REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,cast((CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END) as int) AS SALES_LOCATION_TYPE_P_KEY,S.StoreFormat as STORE_FORMAT_P_KEY,(case when StoreType='Other' THEN 'Online' else StoreType end) as STORE_TYPE_P_KEY,cast(SUM(S.Units_TY) as decimal(18,4)) as UNITS_TY,cast(SUM(S.Units_LY) as decimal(18,4)) AS UNITS_LY,cast((SUM(S.UNITS_TY)-SUM(S.UNITS_LY)) as decimal(18,4)) AS UNITS_CHANGE,cast(SUM(S.Tesp_TY) as decimal(18,4)) as TESP_TY,cast(SUM(S.Tesp_LY) as decimal(18,4)) as TESP_LY,cast((SUM(TESP_TY)-SUM(TESP_LY)) as decimal(18,4)) AS TESP_CHANGE FROM SapArticlesSales S INNER JOIN  (Select distinct calendar_week, week_rank from YearWeekDates) dt ON S.CalendarYearWeek = dt.calendar_week where dt.week_rank between 1 and 4 GROUP BY 'Previous 4 Weeks', S.ProductSourceKey,S.REPORTING_COUNTRY_CODE,CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END,S.StoreFormat,(case when StoreType='Other' THEN 'Online' else StoreType end)) UNION select nvl(TIME_PERIOD,'UNKNOWN') AS TIME_PERIOD,nvl(PRODUCT_SOURCE_KEY_P_KEY,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY, nvl(trim(REPORTING_COUNTRY_CODE_P_KEY),'-1') as REPORTING_COUNTRY_CODE_S_KEY,nvl(STORE_FORMAT_P_KEY,'UNKNOWN') AS STORE_FORMAT_P_KEY,nvl(STORE_TYPE_P_KEY,'UNKNOWN')  AS STORE_TYPE_P_KEY,nvl(SALES_LOCATION_TYPE_P_KEY,-1) as SALES_LOCATION_TYPE_P_KEY,nvl(UNITS_TY,0.0000) as TOTAL_UNITS_TY ,nvl(UNITS_LY,0.0000) as TOTAL_UNITS_LY,NVL(UNITS_CHANGE,0.0000) AS TOTAL_UNITS_CHANGE,NVL(TESP_TY,0.0000) AS TOTAL_TESP_TY,NVL(TESP_LY,0.0000) AS TOTAL_TESP_LY, NVL(TESP_CHANGE,0.0000) AS TOTAL_TESP_CHANGE,current_timestamp as CREATE_DATETIME, cast(null as timestamp) as UPDATE_DATETIME from (SELECT 'Previous 52 Weeks (Feb\\'19 to Feb\\'20)'AS TIME_PERIOD,S.ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY,S.REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,cast((CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END) as int) AS SALES_LOCATION_TYPE_P_KEY,S.StoreFormat as STORE_FORMAT_P_KEY,(case when StoreType='Other' THEN 'Online' else StoreType end) as STORE_TYPE_P_KEY,cast(SUM(S.Units_TY) as decimal(18,4)) as UNITS_TY,cast(SUM(S.Units_LY) as decimal(18,4)) AS UNITS_LY,cast((SUM(S.UNITS_TY)-SUM(S.UNITS_LY)) as decimal(18,4)) AS UNITS_CHANGE,cast(SUM(S.Tesp_TY) as decimal(18,4)) as TESP_TY,cast(SUM(S.Tesp_LY) as decimal(18,4)) as TESP_LY,cast((SUM(TESP_TY)-SUM(TESP_LY)) as decimal(18,4)) AS TESP_CHANGE FROM SapArticlesSales S INNER JOIN  (Select distinct calendar_week, week_rank from YearWeekDates) dt ON S.CalendarYearWeek = dt.calendar_week where S.CalendarYearWeek between 201906 and 202005   GROUP BY 'Previous 52 Weeks (Feb\\'19 to Feb\\'20)', S.ProductSourceKey,S.REPORTING_COUNTRY_CODE,CASE WHEN SiteNumber between 4910 and 4916 THEN 1 when SiteNumber is Not null then 2 ELSE -1 END,S.StoreFormat,(case when StoreType='Other' THEN 'Online' else StoreType end))")

# COMMAND ----------

try:
    records=0
    records=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Store_Covid_delta/').count()
    RPT_INTERNAL_PERFORMANCE_STORE_DFCovid=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Store_Covid_delta/')
    RPT_INTERNAL_PERFORMANCE_STORE_DF=RPT_INTERNAL_PERFORMANCE_STORE_DF.filter(col('TIME_PERIOD')!="Previous 52 Weeks (Feb'19 to Feb'20)")
    RPT_INTERNAL_PERFORMANCE_STORE_DF=RPT_INTERNAL_PERFORMANCE_STORE_DF.union(RPT_INTERNAL_PERFORMANCE_STORE_DFCovid)
    truncate_and_load_synapse (RPT_INTERNAL_PERFORMANCE_STORE_DF,'con_dwh.RPT_INTERNAL_PERFORMANCE_STORE')
except:
    RPT_INTERNAL_PERFORMANCE_STORE_DFCovid=RPT_INTERNAL_PERFORMANCE_STORE_DF.filter(col('TIME_PERIOD')=="Previous 52 Weeks (Feb'19 to Feb'20)")
    RPT_INTERNAL_PERFORMANCE_STORE_DFCovid.write.option('header','true').partitionBy('REPORTING_COUNTRY_CODE_P_KEY').option('overwriteSchema', 'true').mode('overwrite').save('/mnt/self-serve/Temp_Tables/IP/Store_Covid_delta/')
    truncate_and_load_synapse (RPT_INTERNAL_PERFORMANCE_STORE_DF,'con_dwh.RPT_INTERNAL_PERFORMANCE_STORE')

# COMMAND ----------

StoreDistributionDF=spark.sql("SELECT ProductSourceKey,CalendarYearWeek,Count(Distinct SiteNumber) AS Store_Count FROM  SapArticlesSales GROUP BY ProductSourceKey ,CalendarYearWeek")
StoreDistributionDF.createOrReplaceTempView('StoreDistribution')
cpiDF = spark.read.csv('/mnt/self-serve/DSE/HADOOP/DSE_Legacy_CPI_Snapshot_Hadoop/Default/fact_CPI_sample_*.csv',header=True)
cpiDF.createOrReplaceTempView('uk_snapshot_cpi')

# COMMAND ----------

# DBTITLE 1,UK_5B
UK_5B_INTERNAL_PERFORMANCEDF=spark.sql("select a.CalendarYearWeek,a.ProductSourceKey,a.REPORTING_COUNTRY_CODE,a.Channel as SalesLocation,sum(TESP_LY) as TESP_LY,sum(TESP_TY) as TESP_TY,sum(Profit_ly) as Profit_ly, sum(Profit_ty) as Profit_ty,sum(Units_ly) as Units_ly,sum(Units_TY) as Units_TY,(case when a.CompanyCode = 'Boots UK Ltd' then min(cpiuk.CPI_new) else min(cpiroi.CPI_new) end) as cpi_new,min(store_count) AS distribution,week_rank FROM SapArticlesSales a left JOIN (select distinct clientproductid, CPI_new, country from uk_snapshot_cpi where aggregation = 'Category' and execution_code in (SELECT max(execution_code) from uk_snapshot_cpi cpi where country = 'UK')) cpiuk on a.ProductSourceKey = cpiuk.clientproductid left JOIN (select distinct clientproductid, CPI_new, country from uk_snapshot_cpi where aggregation = 'Category' and execution_code in (SELECT max(execution_code) from uk_snapshot_cpi cpi where country = 'IE')) cpiroi on a.ProductSourceKey = cpiroi.clientproductid inner JOIN StoreDistribution b ON b.ProductSourceKey = a.ProductSourceKey and a.CalendarYearWeek = b.CalendarYearWeek INNER JOIN (Select calendar_week, week_rank from YearWeekDates) dt on a.CalendarYearWeek = dt.calendar_week WHERE a.LadderId not like '%DO NOT USE%' GROUP BY a.CalendarYearWeek,a.ProductSourceKey,a.REPORTING_COUNTRY_CODE,a.Channel,a.CompanyCode,week_rank")
UK_5B_INTERNAL_PERFORMANCEDF.createOrReplaceTempView('UK_5B_INTERNAL_PERFORMANCE')

# COMMAND ----------

# DBTITLE 1,PARETO_INTERMEDIATE
INTERNAL_PERFORMANCE_PARETO_INTERMEDIATEDF=spark.sql("SELECT t1.SalesLocation,t2.ProductSourceKey,sum(TESP_TY) AS TESP_TY,sum(Units_ty) AS Units_TY,(sum(TESP_TY) / count(distinct(CalendarYearWeek)) * 52) AS ANNUALISED_TESP_TY,(sum(Units_ty) / count(distinct(CalendarYearWeek))) * 52 AS ANNUALISED_UNITS_TY FROM UK_5B_INTERNAL_PERFORMANCE t1 INNER JOIN (Select ProductSourceKey,ProductHierarchy5Name from DimProduct where ProductRecordSourceKey = 'BTCSAPMDM' and RetailStatusCode IN ('Active','Pending discontinuation') ) t2 on t1.ProductSourceKey = t2.ProductSourceKey  INNER JOIN uk_cmt_hiermap t3 ON t2.ProductHierarchy5Name = t3.`L6 Cost Centre Description` group by t2.ProductSourceKey,t1.SalesLocation")
INTERNAL_PERFORMANCE_PARETO_INTERMEDIATEDF.createOrReplaceTempView('INTERNAL_PERFORMANCE_PARETO_INTERMEDIATE')

# COMMAND ----------

# DBTITLE 1,Ip Pareto 
PARETO_FINAL_DF =spark.sql("select distinct nvl(ProductSourceKey,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY,'UK' as REPORTING_COUNTRY_CODE_P_KEY,nvl(SalesLocation,'UNKNOWN') as SALES_LOCATION_VALUE_PLUS_ALL, nvl(SALES_TYPE,'UNKNOWN') as SALES_TYPE,nvl(cast(TOTAL_TESP_TY as decimal(18,4)),0.0000) as TOTAL_TESP_TY,nvl(cast(TOTAL_UNITS_TY as decimal(18,4)),0.0000) as TOTAL_UNITS_TY,nvl(cast(ANNUALISED_TESP_TY as decimal(18,4)),0.0000) as ANNUALISED_TESP_TY,nvl(cast(ANNUALISED_UNITS_TY as decimal(18,4)),0.0000) as ANNUALISED_UNITS_TY,nvl(cast((DENSE_RANK() OVER (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by sum(ANNUALISED_TESP_TY) over (partition by ProductSourceKey,SalesLocation,VW.SS_CRP_CATEGORY,SALES_TYPE) desc)/max(DENSE_RANK() OVER (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by sum(ANNUALISED_TESP_TY) over (partition by ProductSourceKey,SalesLocation,VW.SS_CRP_CATEGORY,SALES_TYPE) desc)) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE)) as decimal(18,4)),0.0000) as SKU_TESP_RANK_PERCENT,nvl(cast(sum(ANNUALISED_TESP_TY) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by ANNUALISED_TESP_TY desc ROWS BETWEEN unbounded preceding AND CURRENT ROW)/sum(ANNUALISED_TESP_TY) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE) as decimal(18,4)),0.0000) as TOTAL_CUMULATIVE_TESP_PERCENT,nvl(cast((DENSE_RANK() OVER (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by sum(ANNUALISED_UNITS_TY) over (partition by ProductSourceKey,SalesLocation,VW.SS_CRP_CATEGORY,SALES_TYPE) desc)/max(DENSE_RANK() OVER (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by sum(ANNUALISED_UNITS_TY) over (partition by ProductSourceKey,SalesLocation,VW.SS_CRP_CATEGORY,SALES_TYPE) desc)) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE)) as decimal(18,4)),0.0000) as SKU_UNITS_RANK_PERCENT,nvl(cast(sum(ANNUALISED_UNITS_TY) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by ANNUALISED_UNITS_TY desc ROWS BETWEEN unbounded preceding AND CURRENT ROW)/sum(ANNUALISED_UNITS_TY) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE) as decimal(18,4)),0.0000) as TOTAL_CUMULATIVE_UNITS_PERCENT,DENSE_RANK() OVER (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by sum(ANNUALISED_TESP_TY) over (partition by ProductSourceKey,SalesLocation,VW.SS_CRP_CATEGORY,SALES_TYPE) desc) as CUMULATIVE_SKU_TY,cast(sum(ANNUALISED_TESP_TY) over (partition by VW.SS_CRP_CATEGORY,SALES_TYPE order by ANNUALISED_TESP_TY desc ROWS BETWEEN unbounded preceding AND CURRENT ROW)   as decimal(18,4)) as CUMULATIVE_TESP_TY ,current_timestamp() as CREATE_DATETIME,cast(null as timestamp) as UPDATE_DATETIME from (select ProductSourceKey,SalesLocation,SALES_TYPE,sum(TESP_TY) AS  TOTAL_TESP_TY,sum(Units_TY) AS TOTAL_UNITS_TY,sum(ANNUALISED_TESP_TY)  as ANNUALISED_TESP_TY,sum(ANNUALISED_UNITS_TY) as ANNUALISED_UNITS_TY from  ( select ProductSourceKey,SalesLocation,'All Stores' as SALES_TYPE,TESP_TY,Units_TY,cast(ANNUALISED_TESP_TY  as decimal(18,4)),cast(ANNUALISED_UNITS_TY  as decimal(18,4)) from INTERNAL_PERFORMANCE_PARETO_INTERMEDIATE union select ProductSourceKey,SalesLocation, SalesLocation as SALES_TYPE,TESP_TY,Units_TY,cast(ANNUALISED_TESP_TY  as decimal(18,4)),cast(ANNUALISED_UNITS_TY  as decimal(18,4)) from INTERNAL_PERFORMANCE_PARETO_INTERMEDIATE) a group by ProductSourceKey,SalesLocation,SALES_TYPE) I LEFT JOIN DIM_RPT_PRODUCT_BRAND_CATEGORY  VW ON VW.PRODUCT_SOURCE_KEY_P_KEY = I.ProductSourceKey") 

# COMMAND ----------

PARETO_FINAL_DF.write.option('header','true').mode('overwrite').save('/mnt/self-serve/Temp_Tables/IP/Pareto_Ip/')
PARETO_FINAL=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Pareto_Ip/')

# COMMAND ----------

# DBTITLE 1,RPT_PARETO_LOAD
truncate_and_load_synapse (PARETO_FINAL,'con_dwh.RPT_INTERNAL_PERFORMANCE_PARETO')

# COMMAND ----------

# DBTITLE 1,UK_IP_INTERMEDIATE
UK_INTERNAL_PERFORMANCE_DF=spark.sql("select 60 as period,max(CalendarYearWeek) as CalendarYearWeek ,REPORTING_COUNTRY_CODE,saleslocation,ProductSourceKey ,sum(units_ty) as units_ty,sum(units_ly) as units_ly,sum(t1.tesp_ty) as tesp_ty,sum(t1.tesp_ly) as tesp_ly,sum(profit_ty) as profit_ty,sum(profit_ly) as profit_ly,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ty else online_funding.adjustedprofit_ty end) as adjustedprofit_ty,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ly else online_funding.adjustedprofit_ly end) as adjustedprofit_ly, avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ty else online_funding.adjustedmargin_ty end) as adjustedmargin_ty,avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ly else online_funding.adjustedmargin_ly end) as adjustedmargin_ly,avg(cpi_new) as cpi_new,avg(distribution) as distribution from UK_5B_INTERNAL_PERFORMANCE t1 left join (select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC)and area IN ('UK','ROI') and date_range = 52  group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) stores_funding on t1.ProductSourceKey = stores_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = stores_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation = 'Stores' left join ( select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC) and area IN ('.COM','IE') and date_range = 52 group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) online_funding  on t1.ProductSourceKey = online_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = online_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation <> 'Stores' where week_rank between 13 and 64 group by REPORTING_COUNTRY_CODE, saleslocation,ProductSourceKey union select 52 as period,max(CalendarYearWeek) as CalendarYearWeek ,REPORTING_COUNTRY_CODE,saleslocation,ProductSourceKey ,sum(units_ty) as units_ty,sum(units_ly) as units_ly,sum(t1.tesp_ty) as tesp_ty,sum(t1.tesp_ly) as tesp_ly,sum(profit_ty) as profit_ty,sum(profit_ly) as profit_ly,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ty else online_funding.adjustedprofit_ty end) as adjustedprofit_ty,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ly else online_funding.adjustedprofit_ly end) as adjustedprofit_ly, avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ty else online_funding.adjustedmargin_ty end) as adjustedmargin_ty,avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ly else online_funding.adjustedmargin_ly end) as adjustedmargin_ly,avg(cpi_new) as cpi_new,avg(distribution) as distribution from UK_5B_INTERNAL_PERFORMANCE t1 left join (select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC)and area IN ('UK','ROI') and date_range = 52  group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) stores_funding on t1.ProductSourceKey = stores_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = stores_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation = 'Stores' left join ( select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC) and area IN ('.COM','IE') and date_range = 52 group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) online_funding  on t1.ProductSourceKey = online_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = online_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation <> 'Stores' where week_rank between 1 and 52 group by REPORTING_COUNTRY_CODE, saleslocation,ProductSourceKey union select 12 as period,max(CalendarYearWeek) as CalendarYearWeek ,REPORTING_COUNTRY_CODE,saleslocation,ProductSourceKey ,sum(units_ty) as units_ty,sum(units_ly) as units_ly,sum(t1.tesp_ty) as tesp_ty,sum(t1.tesp_ly) as tesp_ly,sum(profit_ty) as profit_ty,sum(profit_ly) as profit_ly,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ty else online_funding.adjustedprofit_ty end) as adjustedprofit_ty,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ly else online_funding.adjustedprofit_ly end) as adjustedprofit_ly, avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ty else online_funding.adjustedmargin_ty end) as adjustedmargin_ty,avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ly else online_funding.adjustedmargin_ly end) as adjustedmargin_ly,avg(cpi_new) as cpi_new,avg(distribution) as distribution from UK_5B_INTERNAL_PERFORMANCE t1 left join (select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC)and area IN ('UK','ROI') and date_range = 12  group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) stores_funding on t1.ProductSourceKey = stores_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = stores_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation = 'Stores' left join ( select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC) and area IN ('.COM','IE') and date_range = 12 group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) online_funding  on t1.ProductSourceKey = online_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = online_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation <> 'Stores' where week_rank between 1 and 12 group by REPORTING_COUNTRY_CODE, saleslocation,ProductSourceKey union select 4 as period,max(CalendarYearWeek) as CalendarYearWeek ,REPORTING_COUNTRY_CODE,saleslocation,ProductSourceKey ,sum(units_ty) as units_ty,sum(units_ly) as units_ly,sum(t1.tesp_ty) as tesp_ty,sum(t1.tesp_ly) as tesp_ly,sum(profit_ty) as profit_ty,sum(profit_ly) as profit_ly,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ty else online_funding.adjustedprofit_ty end) as adjustedprofit_ty,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ly else online_funding.adjustedprofit_ly end) as adjustedprofit_ly, avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ty else online_funding.adjustedmargin_ty end) as adjustedmargin_ty,avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ly else online_funding.adjustedmargin_ly end) as adjustedmargin_ly,avg(cpi_new) as cpi_new,avg(distribution) as distribution from UK_5B_INTERNAL_PERFORMANCE t1 left join (select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC)and area IN ('UK','ROI') and date_range = 4  group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) stores_funding on t1.ProductSourceKey = stores_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = stores_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation = 'Stores' left join ( select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC) and area IN ('.COM','IE') and date_range = 4 group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) online_funding  on t1.ProductSourceKey = online_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = online_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation <> 'Stores' where week_rank between 1 and 4 group by REPORTING_COUNTRY_CODE, saleslocation,ProductSourceKey union select 0 as period,max(CalendarYearWeek) as CalendarYearWeek ,REPORTING_COUNTRY_CODE,saleslocation,ProductSourceKey ,sum(units_ty) as units_ty,sum(units_ly) as units_ly,sum(t1.tesp_ty) as tesp_ty,sum(t1.tesp_ly) as tesp_ly,sum(profit_ty) as profit_ty,sum(profit_ly) as profit_ly,max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ty else online_funding.adjustedprofit_ty end) as adjustedprofit_ty,\
max(case when saleslocation = 'Stores' then stores_funding.adjustedprofit_ly else online_funding.adjustedprofit_ly end) as adjustedprofit_ly, avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ty else online_funding.adjustedmargin_ty end) as adjustedmargin_ty,avg(case when saleslocation = 'Stores' then stores_funding.adjustedmargin_ly else online_funding.adjustedmargin_ly end) as adjustedmargin_ly,avg(cpi_new) as cpi_new,avg(distribution) as distribution from UK_5B_INTERNAL_PERFORMANCE t1 left join (select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC)and area IN ('UK','ROI') and date_range = 52 group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY) stores_funding on t1.ProductSourceKey=stores_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE= stores_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation = 'Stores' left join (select PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY,sum(adjusted_margin_ly * total_tesp_ly) as adjustedprofit_ly,sum(adjusted_margin_ty * total_tesp_ty) as adjustedprofit_ty,sum(adjusted_margin_ly) as adjustedmargin_ly, sum(adjusted_margin_ty) as adjustedmargin_ty from STG_UK_MARGINS_CALC where run_date in (select max(run_date) from STG_UK_MARGINS_CALC) and area IN ('.COM','IE') and date_range = 52 group by PRODUCT_SOURCE_KEY,area,REPORTING_COUNTRY_CODE_P_KEY ) online_funding  on t1.ProductSourceKey = online_funding.PRODUCT_SOURCE_KEY and t1.REPORTING_COUNTRY_CODE = online_funding.REPORTING_COUNTRY_CODE_P_KEY and t1.saleslocation <> 'Stores' where CalendarYearWeek between 201906 and  202005 group by REPORTING_COUNTRY_CODE,saleslocation,ProductSourceKey")
UK_INTERNAL_PERFORMANCE_DF.createOrReplaceTempView("UK_INTERNAL_PERFORMANCE")

# COMMAND ----------

# DBTITLE 1,CPI
CPI_TABLEDF=spark.sql("SELECT Period,REPORTING_COUNTRY_CODE,ProductSourceKey,Count(distinct case when cpi_new < 50 then ProductSourceKey else Null end) AS cpi_1_sku,Sum(case when cpi_new < 50 then TESP_TY else 0 end) AS cpi_1_tesp,Count(distinct case when cpi_new between 50 and 100  then ProductSourceKey else Null end) AS cpi_2_sku,Sum(case when cpi_new between 50 and 100 then TESP_TY else 0 end)	AS cpi_2_tesp,Count( distinct case when cpi_new between 100 and 200  then ProductSourceKey else Null end) AS cpi_3_sku,Sum(case when cpi_new between 100 and 200 then TESP_TY else 0 end)	AS cpi_3_tesp,Count(distinct case when cpi_new > 200  then ProductSourceKey else Null end)	AS cpi_4_sku,Sum(case when cpi_new > 200 then TESP_TY else 0 end)AS cpi_4_tesp from UK_INTERNAL_PERFORMANCE GROUP BY Period,REPORTING_COUNTRY_CODE,ProductSourceKey")
CPI_TABLEDF.createOrReplaceTempView('CPI_TABLE') 

# COMMAND ----------

# DBTITLE 1,INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE
INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE_DF=spark.sql("SELECT (CASE WHEN t1.Period = '60' THEN 'Previous 52 CRP Weeks' WHEN t1.Period = '52' THEN 'Previous 52 Weeks' When t1.Period = '12' then 'Previous 12 Weeks'when t1.Period = '4' then 'Previous 4 Weeks' When t1.Period = '0' then 'Previous 52 Weeks (Feb\\'19 to Feb\\'20)' end)  AS TimePeriod, t1.ProductSourceKey, t1.REPORTING_COUNTRY_CODE,t1.SalesLocation,(case when t2.ProductSourceKey is not null then 'Y' else 'N' end) as DiscontinuedFlag,(case when (TESP_TY > 0 and TESP_LY = 0) then 'NPD' when t2.ProductSourceKey is not null then 'Deletes' else 'Base' end) as Type,CalendarYearWeek,TESP_TY AS Total_TESP_TY,(TESP_TY - TESP_LY) AS Total_TESP_YOY,TESP_LY AS Total_TESP_LY,Units_TY AS Total_Units_TY,(Units_ty - Units_ly) AS Total_Units_YOY,Units_LY AS Total_Units_LY,adjustedprofit_ty AS Total_Adjusted_Profit_TY,(Sum(adjustedprofit_ty) - Sum(adjustedprofit_ly)) AS Total_Adjusted_Profit_YOY,adjustedprofit_ly AS Total_Adjusted_Profit_LY,cpi_new AS CPI,Distribution,adjustedmargin_ty AS Adjusted_Margin_ty,adjustedmargin_ly AS Adjusted_Margin_ly,SUM(cpi_1_tesp + cpi_2_tesp + cpi_3_tesp + cpi_4_tesp) AS Brand_Value,Sum(cpi_1_sku + cpi_2_sku + cpi_3_sku + cpi_4_sku) AS Brand_SKUs_with_CPI,min(cpi_1_sku) AS Cpi_1_skus,min(cpi_1_tesp) AS Cpi_1_tesp,min(cpi_2_sku) AS Cpi_2_skus,min(cpi_2_tesp) AS Cpi_2_tesp,min(cpi_3_sku) AS Cpi_3_skus,min(cpi_3_tesp) AS Cpi_3_tesp,min(cpi_4_sku) AS Cpi_4_skus,min(cpi_4_tesp) AS Cpi_4_tesp,t4.LadderId,t4.Brand FROM UK_INTERNAL_PERFORMANCE t1 left join (Select ProductSourceKey from DimProduct where RetailStatusCode = 'Discontinued' and ProductRecordSourceKey = 'BTCSAPMDM' group by ProductSourceKey) t2 on t1.ProductSourceKey = t2.ProductSourceKey JOIN CPI_TABLE t3 ON t1.REPORTING_COUNTRY_CODE = t3.REPORTING_COUNTRY_CODE AND t1.Period = t3.Period AND t1.productsourcekey = t3.ProductSourceKey LEFT JOIN DimProduct t4 ON t1.ProductSourceKey = t4.ProductSourceKey WHERE ProductRecordSourceKey ='BTCSAPMDM' GROUP BY (CASE WHEN t1.Period = '60' THEN 'Previous 52 CRP Weeks' WHEN t1.Period = '52' THEN 'Previous 52 Weeks' When t1.Period = '12' then 'Previous 12 Weeks'when t1.Period = '4' then 'Previous 4 Weeks' When t1.Period = '0' then 'Previous 52 Weeks (Feb\\'19 to Feb\\'20)' end ),t1.ProductSourceKey,t1.REPORTING_COUNTRY_CODE,t1.SalesLocation,(case when t2.ProductSourceKey is not null then 'Y' else 'N' end) ,(case when TESP_TY > 0 and TESP_LY = 0 then 'NPD'when t2.ProductSourceKey is not null then 'Deletes' else 'Base' end),CalendarYearWeek,TESP_TY,TESP_LY,Units_TY,Units_LY,adjustedprofit_ty,adjustedprofit_ly,cpi_new,Distribution,adjustedmargin_ty,adjustedmargin_ly,t4.LadderId,t4.Brand")
# # INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE_DF.createOrReplaceTempView("INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE")

# COMMAND ----------

INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE_DF.write.option('header','true').mode('overwrite').save('/mnt/self-serve/Temp_Tables/IP/INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE/')

# COMMAND ----------

INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE/')
INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE.createOrReplaceTempView("INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE")

# COMMAND ----------

# DBTITLE 1,RPT_INTERNAL_PERFORMANCE_WATERFALL
RPT_INTERNAL_PERFORMANCE_WATERFALL_DF=spark.sql("select nvl(TIME_PERIOD,'UNKNOWN') as TIME_PERIOD,nvl(PRODUCT_SOURCE_KEY_P_KEY,'UNKNOWN') as PRODUCT_SOURCE_KEY_P_KEY,nvl(REPORTING_COUNTRY_CODE_P_KEY,'-1') as REPORTING_COUNTRY_CODE_P_KEY,nvl(PRODUCT_TYPE_PLUS_LY_P_KEY,'UNKNOWN') AS PRODUCT_TYPE_PLUS_LY_P_KEY,nvl(SALES_LOCATION_TYPE_S_KEY,-1) as SALES_LOCATION_TYPE_S_KEY,nvl(LADDER_PLUS_LY,'UNKNOWN') AS LADDER_PLUS_LY,nvl(BRAND_PLUS_LY,'UNKNOWN') AS BRAND_PLUS_LY,NVL(cast(TESP_AMOUNT as decimal(18,4)),0.000) as TESP_AMOUNT,nvl(cast(UNITS_SOLD as decimal(18,4)),0.000) as UNITS_SOLD,nvl(cast(ADJUSTED_PROFIT as decimal(18,4)),0.000) as ADJUSTED_PROFIT,current_timestamp() as CREATE_DATETIME,cast(null as timestamp) as UPDATE_DATETIME from (SELECT TimePeriod AS TIME_PERIOD,ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY,REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,CASE WHEN SalesLocation = 'Online' THEN 1 WHEN SalesLocation = 'Stores' THEN 2 ELSE -1 END AS SALES_LOCATION_TYPE_S_KEY,Type AS PRODUCT_TYPE_PLUS_LY_P_KEY,LadderID as LADDER_PLUS_LY,Brand as BRAND_PLUS_LY, sum(Total_TESP_TY) - sum(Total_TESP_LY) AS TESP_AMOUNT,sum(Total_Units_TY) - sum(Total_Units_LY) AS UNITS_SOLD,sum(Total_Adjusted_Profit_TY) - sum(Total_Adjusted_Profit_LY) AS ADJUSTED_PROFIT  FROM INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE group by TimePeriod,ProductSourceKey,REPORTING_COUNTRY_CODE,(CASE WHEN SalesLocation = 'Online' THEN 1 WHEN SalesLocation = 'Stores' THEN 2 ELSE -1 END),Type,LadderID,Brand UNION SELECT TimePeriod AS TIME_PERIOD,ProductSourceKey as PRODUCT_SOURCE_KEY_P_KEY, REPORTING_COUNTRY_CODE as REPORTING_COUNTRY_CODE_P_KEY,CASE WHEN SalesLocation = 'Online' THEN 1 WHEN SalesLocation = 'Stores' THEN 2 ELSE -1 END AS SALES_LOCATION_TYPE_S_KEY,'LY' AS PRODUCT_TYPE_PLUS_LY_P_KEY,'LY' AS LADDER_PLUS_LY ,'LY' AS BRAND_PLUS_LY,SUM(Total_TESP_LY) as TESP_AMOUNT,SUM(Total_Units_LY) UNITS_SOLD,SUM(Total_Adjusted_Profit_LY) as ADJUSTED_PROFIT FROM INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE group by TimePeriod,ProductSourceKey,REPORTING_COUNTRY_CODE,(CASE WHEN SalesLocation = 'Online' THEN 1 WHEN SalesLocation = 'Stores' THEN 2 ELSE -1 END))")
#RPT_INTERNAL_PERFORMANCE_WATERFALL_DF.createOrReplaceTempView("PERFORMANCE_WATERFALL")

# COMMAND ----------

try:
    records=0
    records=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Waterfall_Covid_delta/').count()
    RPT_INTERNAL_PERFORMANCE_WATERFALL_DFCovid=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Waterfall_Covid_delta/')
    RPT_INTERNAL_PERFORMANCE_WATERFALL_DF=RPT_INTERNAL_PERFORMANCE_WATERFALL_DF.filter(col('TIME_PERIOD')!="Previous 52 Weeks (Feb'19 to Feb'20)")
    RPT_INTERNAL_PERFORMANCE_WATERFALL_DF=RPT_INTERNAL_PERFORMANCE_WATERFALL_DF.union(RPT_INTERNAL_PERFORMANCE_WATERFALL_DFCovid)
    truncate_and_load_synapse (RPT_INTERNAL_PERFORMANCE_WATERFALL_DF,'con_dwh.RPT_INTERNAL_PERFORMANCE_WATERFALL')
except:
    RPT_INTERNAL_PERFORMANCE_WATERFALL_DFCovid=RPT_INTERNAL_PERFORMANCE_WATERFALL_DF.filter(col('TIME_PERIOD')=="Previous 52 Weeks (Feb'19 to Feb'20)")  
    RPT_INTERNAL_PERFORMANCE_WATERFALL_DFCovid.write.option('header','true').partitionBy('REPORTING_COUNTRY_CODE_P_KEY').option('overwriteSchema', 'true').mode('overwrite'). save('/mnt/self-serve/Temp_Tables/IP/Waterfall_Covid_delta/')
    truncate_and_load_synapse (RPT_INTERNAL_PERFORMANCE_WATERFALL_DF,'con_dwh.RPT_INTERNAL_PERFORMANCE_WATERFALL')

# COMMAND ----------

INTERNAL_PERFORMANCE_MAINDF=spark.sql("Select nvl(cast(TIME_PERIOD as STRING),'UNKNOWN') AS TIME_PERIOD,nvl(cast(CALENDAR_YEAR_WEEK as int),0) as CALENDAR_YEAR_WEEK,nvl(cast(PRODUCT_SOURCE_KEY_P_KEY as STRING),'UNKNOWN') AS PRODUCT_SOURCE_KEY_P_KEY,nvl(cast(REPORTING_COUNTRY_CODE_P_KEY as STRING),'-1') as REPORTING_COUNTRY_CODE_P_KEY,nvl(cast(PRODUCT_TYPE_P_KEY as STRING),'UNKNOWN') AS PRODUCT_TYPE_P_KEY,nvl(CAST(SALES_LOCATION_S_KEY AS int),0) as SALES_LOCATION_S_KEY,nvl(CAST(PRODUCT_NAME AS STRING),'UNKNOWN') AS PRODUCT_NAME,nvl(CAST(LADDER_ID AS  STRING),'UNKNOWN') as LADDER_ID,nvl(CAST(BRAND AS STRING),'UNKNOWN') AS BRAND,nvl(CAST(SALES_TYPE AS STRING),'UNKNOWN') AS SALES_TYPE,nvl(CAST(LADDER_WITH_OTHERS AS STRING),'UNKNOWN') AS LADDER_WITH_OTHERS,nvl(CAST(BRAND_WITH_OTHERS AS STRING),'UNKNOWN') AS BRAND_WITH_OTHERS,nvl(CAST(DISTRIBUTION_STORE_COUNT AS INT),0) as DISTRIBUTION_STORE_COUNT,nvl(cast(BRAND_VALUE as decimal(18,4)),0.0000) as TOTAL_BRAND_VALUE,nvl(cast(BRAND_SKUS_WITH_CPI as int),0) as TOTAL_BRAND_SKUS_WITH_CPI,nvl(cast(CPI as decimal(28,10)),0.0000) as Average_CPI,nvl(cast(CPI_1_SKUS as int),0) as MIN_CPI_1_SKUS,nvl(cast(CPI_1_TESP as decimal(18,4)),0.0000) as MIN_CPI_1_TESP,nvl(cast(CPI_2_SKUS as int),0) as MIN_CPI_2_SKUS,nvl(cast(CPI_2_TESP as decimal(18,4)),0.0000) as MIN_CPI_2_TESP,nvl(cast(CPI_3_SKUS as int),0) as MIN_CPI_3_SKUS,nvl(cast(CPI_3_TESP as decimal(18,4)),0.0000) as MIN_CPI_3_TESP,nvl(cast(CPI_4_SKUS as int),0) as MIN_CPI_4_SKUS,nvl(cast(CPI_4_TESP as decimal(18,4)),0.0000) as MIN_CPI_4_TESP,nvl(cast(TOTAL_TESP_TY as decimal(18,4)),0.0000)as TOTAL_TESP_TY,nvl(cast(Total_TESP_YOY as decimal(18,4)),0.0000) as Total_TESP_YOY,nvl(cast(Total_TESP_LY as decimal(18,4)),0.0000) as Total_TESP_LY,nvl(cast(TOTAL_UNITS_TY as decimal(18,4)),0.0000) as TOTAL_UNITS_TY,nvl(cast(TOTAL_UNITS_YOY as decimal(18,4)),0.0000) as TOTAL_UNITS_YOY,nvl(cast(TOTAL_UNITS_LY as decimal(18,4)),0.0000) as TOTAL_UNITS_LY,nvl(cast(TOTAL_ADJUSTED_PROFIT_TY as decimal(18,4)),0.0000) as TOTAL_ADJUSTED_PROFIT_TY,nvl(cast(TOTAL_ADJUSTED_PROFIT_YOY as decimal(18,4)),0.0000) as TOTAL_ADJUSTED_PROFIT_YOY,nvl(cast(TOTAL_ADJUSTED_PROFIT_LY as decimal(18,4)),0.0000) as TOTAL_ADJUSTED_PROFIT_LY,nvl(cast(ADJUSTED_MARGIN_TY as decimal(18,4)),0.0000) as ADJUSTED_MARGIN_TY,nvl(cast(ADJUSTED_MARGIN_LY as decimal(18,4)),0.0000) as ADJUSTED_MARGIN_LY,current_timestamp() as CREATE_DATETIME,cast(null as timestamp) as UPDATE_TIMESTAMP FROM (SELECT TIME_PERIOD,CALENDAR_YEAR_WEEK, PRODUCT_SOURCE_KEY_P_KEY,REPORTING_COUNTRY_CODE_P_KEY,PRODUCT_TYPE_P_KEY,SALES_LOCATION_S_KEY,PRODUCT_NAME, LADDER_ID,BRAND,SALES_TYPE,CASE WHEN DENSE_RANK() OVER(PARTITION BY TIME_PERIOD,REPORTING_COUNTRY_CODE_P_KEY,SS_CRP_CATEGORY,SALES_TYPE ORDER BY SUM_TESP_LADDER DESC)<=10 THEN Ladder_Id else 'Others' end as LADDER_WITH_OTHERS,CASE WHEN DENSE_RANK() OVER( PARTITION BY TIME_PERIOD,REPORTING_COUNTRY_CODE_P_KEY,SS_CRP_CATEGORY,SALES_TYPE ORDER BY SUM_TESP_BRAND DESC)<=10 THEN Brand else 'Others' end as BRAND_WITH_OTHERS,DISTRIBUTION_STORE_COUNT,BRAND_VALUE,BRAND_SKUS_WITH_CPI,CPI,CPI_1_SKUS,CPI_1_TESP,CPI_2_SKUS, CPI_2_TESP,CPI_3_SKUS,CPI_3_TESP,CPI_4_SKUS,CPI_4_TESP,TOTAL_TESP_TY,TOTAL_TESP_YOY,TOTAL_TESP_LY,TOTAL_UNITS_TY,TOTAL_UNITS_YOY,TOTAL_UNITS_LY,Total_Adjusted_Profit_TY,TOTAL_ADJUSTED_PROFIT_YOY,TOTAL_ADJUSTED_PROFIT_LY,ADJUSTED_MARGIN_TY,ADJUSTED_MARGIN_LY FROM (select  TimePeriod AS TIME_PERIOD,VW.SS_CRP_CATEGORY,CalendarYearWeek AS CALENDAR_YEAR_WEEK,M.ProductSourceKey AS PRODUCT_SOURCE_KEY_P_KEY,REPORTING_COUNTRY_CODE AS REPORTING_COUNTRY_CODE_P_KEY,Type AS PRODUCT_TYPE_P_KEY,CASE WHEN CONCAT('All Stores',' - ',SalesLocation) = 'All Stores - Stores' THEN 4 WHEN CONCAT('All Stores',' - ',SalesLocation) = 'All Stores - Online' THEN 3 END AS SALES_LOCATION_S_KEY,DP.ProductName AS PRODUCT_NAME,DP.LadderId  AS LADDER_ID,DP.Brand AS BRAND,'All Stores' AS SALES_TYPE,Sum(Total_TESP_TY) OVER (partition by DP.LadderId,TimePeriod,REPORTING_COUNTRY_CODE,VW.SS_CRP_CATEGORY,'ALL Stores') AS SUM_TESP_LADDER,Sum(Total_TESP_TY) OVER (partition by DP.Brand,TimePeriod,REPORTING_COUNTRY_CODE,VW.SS_CRP_CATEGORY,'ALL Stores') as SUM_TESP_BRAND,Distribution AS DISTRIBUTION_STORE_COUNT,Brand_Value AS BRAND_VALUE,Brand_SKUs_with_CPI AS BRAND_SKUS_WITH_CPI,CPI,Cpi_1_skus AS CPI_1_SKUS,Cpi_1_tesp AS CPI_1_TESP,Cpi_2_skus AS CPI_2_SKUS,Cpi_2_tesp AS CPI_2_TESP,Cpi_3_skus AS CPI_3_SKUS,Cpi_3_tesp AS CPI_3_TESP ,Cpi_4_skus AS CPI_4_SKUS,Cpi_4_tesp AS CPI_4_TESP,Total_TESP_TY AS TOTAL_TESP_TY,Total_TESP_YOY AS TOTAL_TESP_YOY,Total_TESP_LY AS TOTAL_TESP_LY,Total_Units_TY AS TOTAL_UNITS_TY ,Total_Units_YOY AS TOTAL_UNITS_YOY,Total_Units_LY AS TOTAL_UNITS_LY,Total_Adjusted_Profit_TY AS TOTAL_ADJUSTED_PROFIT_TY,Total_Adjusted_Profit_YOY AS TOTAL_ADJUSTED_PROFIT_YOY,Total_Adjusted_Profit_LY AS TOTAL_ADJUSTED_PROFIT_LY,Adjusted_Margin_TY AS ADJUSTED_MARGIN_TY,Adjusted_Margin_LY AS ADJUSTED_MARGIN_LY  FROM INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE M LEFT JOIN DimProduct DP ON M.ProductSourceKey = DP.ProductSourceKey LEFT JOIN  DIM_RPT_PRODUCT_BRAND_CATEGORY VW ON VW.PRODUCT_SOURCE_KEY_P_KEY = M.ProductSourceKey union select TimePeriod AS TIME_PERIOD,VW.SS_CRP_CATEGORY,CalendarYearWeek AS CALENDAR_YEAR_WEEK,M.ProductSourceKey AS PRODUCT_SOURCE_KEY_P_KEY,REPORTING_COUNTRY_CODE AS REPORTING_COUNTRY_CODE_P_KEY,Type AS PRODUCT_TYPE_P_KEY,CASE WHEN SALESLOCATION='Stores'  THEN 2 WHEN SALESLOCATION='Online'  THEN 1 END AS SALES_LOCATION_S_KEY,DP.ProductName AS PRODUCT_NAME,DP.LadderId  AS LADDER_ID,DP.Brand AS BRAND,CASE WHEN SALESLOCATION='Stores' THEN 'Stores' ELSE 'Online' END AS SALES_TYPE,Sum(Total_TESP_TY) OVER (partition by DP.LadderId,SALESLOCATION,TimePeriod,REPORTING_COUNTRY_CODE, VW.SS_CRP_CATEGORY) as SUM_TESP_LADDER,Sum(Total_TESP_TY) OVER (partition by DP.Brand,TimePeriod,REPORTING_COUNTRY_CODE,VW.SS_CRP_CATEGORY) as SUM_TESP_BRAND,Distribution AS DISTRIBUTION_STORE_COUNT,Brand_Value AS BRAND_VALUE,Brand_SKUs_with_CPI AS BRAND_SKUS_WITH_CPI,CPI,Cpi_1_skus AS CPI_1_SKUS,Cpi_1_tesp AS CPI_1_TESP,Cpi_2_skus AS CPI_2_SKUS,Cpi_2_tesp AS CPI_2_TESP,Cpi_3_skus AS CPI_3_SKUS,Cpi_3_tesp AS CPI_3_TESP ,Cpi_4_skus AS CPI_4_SKUS,Cpi_4_tesp AS CPI_4_TESP,Total_TESP_TY AS TOTAL_TESP_TY,Total_TESP_YOY AS TOTAL_TESP_YOY,Total_TESP_LY AS TOTAL_TESP_LY,Total_Units_TY AS TOTAL_UNITS_TY ,Total_Units_YOY AS TOTAL_UNITS_YOY,Total_Units_LY AS TOTAL_UNITS_LY,Total_Adjusted_Profit_TY AS TOTAL_ADJUSTED_PROFIT_TY,Total_Adjusted_Profit_YOY AS TOTAL_ADJUSTED_PROFIT_YOY,Total_Adjusted_Profit_LY AS TOTAL_ADJUSTED_PROFIT_LY,Adjusted_Margin_TY AS ADJUSTED_MARGIN_TY,Adjusted_Margin_LY AS ADJUSTED_MARGIN_LY  FROM INTERNAL_PERFORMANCE_MAIN_INTERMEDIATE M LEFT JOIN DimProduct DP ON M.ProductSourceKey = DP.ProductSourceKey LEFT JOIN  DIM_RPT_PRODUCT_BRAND_CATEGORY VW ON VW.PRODUCT_SOURCE_KEY_P_KEY = M.ProductSourceKey)H)K")

# COMMAND ----------

INTERNAL_PERFORMANCE_MAINDF.write.option('header','true').mode('overwrite').save('/mnt/self-serve/Temp_Tables/IP/INTERNAL_PERFORMANCE_MAIN/')
INTERNAL_PERFORMANCE_MAIN=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/INTERNAL_PERFORMANCE_MAIN/')

# COMMAND ----------

try:
    records=0
    records=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Main_Covid_delta/').count()
    INTERNAL_PERFORMANCE_MAINDFCovid=spark.read.option('header', True).load('/mnt/self-serve/Temp_Tables/IP/Main_Covid_delta/')
    INTERNAL_PERFORMANCE_MAINDF_1=INTERNAL_PERFORMANCE_MAIN.filter(col('TIME_PERIOD')!="Previous 52 Weeks (Feb'19 to Feb'20)")
    INTERNAL_PERFORMANCE_MAINDF_2=INTERNAL_PERFORMANCE_MAINDF_1.union(INTERNAL_PERFORMANCE_MAINDFCovid)
    truncate_and_load_synapse (INTERNAL_PERFORMANCE_MAINDF_2,'con_dwh.RPT_INTERNAL_PERFORMANCE_MAIN')
except:
    INTERNAL_PERFORMANCE_MAINDFCovid=INTERNAL_PERFORMANCE_MAIN.filter(col('TIME_PERIOD')=="Previous 52 Weeks (Feb'19 to Feb'20)")
    INTERNAL_PERFORMANCE_MAINDFCovid.write.option('header','true').partitionBy('REPORTING_COUNTRY_CODE_P_KEY').option('overwriteSchema','true').mode('overwrite').save('/mnt/self-serve/Temp_Tables/IP/Main_Covid_delta/')
    truncate_and_load_synapse (INTERNAL_PERFORMANCE_MAIN,'con_dwh.RPT_INTERNAL_PERFORMANCE_MAIN')
    

# COMMAND ----------

#new changes
DIM_INTERNAL_PERFORMANCE_SALES_LOCATIONSDF=spark.sql("select * from DIM_INTERNAL_PERFORMANCE_SALES_LOCATIONS")

# COMMAND ----------

truncate_and_load_synapse (DIM_INTERNAL_PERFORMANCE_SALES_LOCATIONSDF,'con_dwh.DIM_INTERNAL_PERFORMANCE_SALES_LOCATION')

# COMMAND ----------

